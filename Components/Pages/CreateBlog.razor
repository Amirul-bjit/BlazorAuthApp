@page "/blogs/create"
@using BlazorAuthApp.DTOs
@using BlazorAuthApp.Interfaces
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@inject IBlogService BlogService
@inject ICategoryService CategoryService
@inject NavigationManager NavManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IJSRuntime JS
@inject NavigationManager Navigation
@attribute [Authorize]

<PageTitle>Create Blog</PageTitle>

<div class="container my-5">
    <!-- Top Back Button -->
    <div class="mb-4">
        <button type="button" class="btn btn-secondary px-4 py-2 rounded-3 fw-semibold shadow-sm" @onclick="BackToBlogs">
            <i class="bi bi-arrow-left-circle me-2"></i> Back to All Blogs
        </button>
    </div>

    <div class="card border-0 shadow-lg rounded-4 overflow-hidden">
        <div class="card-header bg-gradient-primary text-white p-4 border-0">
            <h2 class="mb-0 fw-bold text-center">Write a New Blog</h2>
        </div>
        
        <div class="card-body p-4 p-lg-5">
            <EditForm Model="createBlogDto" OnValidSubmit="HandleValidSubmit">
                <DataAnnotationsValidator />

                @if (loadingCategories)
                {
                    <div class="text-center py-5">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading...</span>
                        </div>
                        <p class="mt-3 text-muted">Loading categories...</p>
                    </div>
                }
                else
                {
                    <!-- Title -->
                    <div class="mb-4">
                        <label class="form-label fw-semibold">Title</label>
                        <div class="input-group">
                            <span class="input-group-text bg-light border-0">
                                <i class="bi bi-type-h1"></i>
                            </span>
                            <InputText class="@GetInputClass(createBlogDto.Title, 5, 100)" @bind-Value="createBlogDto.Title" @oninput="UpdateCharCount" placeholder="Enter an engaging title..." />
                        </div>
                        @if (submitted)
                        {
                            <div class="text-danger small mt-1">@GetFieldError(createBlogDto.Title, "Title", 5, 100)</div>
                        }
                        <small class="text-muted">Characters: @GetCharCount(createBlogDto.Title)/100</small>
                    </div>

                    <!-- Summary -->
                    <div class="mb-4">
                        <label class="form-label fw-semibold">Summary</label>
                        <div class="input-group">
                            <span class="input-group-text bg-light border-0">
                                <i class="bi bi-card-text"></i>
                            </span>
                            <InputTextArea class="@GetInputClass(createBlogDto.Summary, 20, 250)" @bind-Value="createBlogDto.Summary" Rows="3" @oninput="UpdateCharCount" placeholder="Write a brief summary that hooks readers..." />
                        </div>
                        @if (submitted)
                        {
                            <div class="text-danger small mt-1">@GetFieldError(createBlogDto.Summary, "Summary", 20, 250)</div>
                        }
                        <small class="text-muted">Characters: @GetCharCount(createBlogDto.Summary)/250</small>
                    </div>

                    <!-- Content -->
                    <div class="mb-4">
                        <label class="form-label fw-semibold">Content</label>
                        <div class="input-group">
                            <span class="input-group-text bg-light border-0">
                                <i class="bi bi-file-earmark-text"></i>
                            </span>
                            <InputTextArea class="@GetInputClass(createBlogDto.Content, 50, 5000)" @bind-Value="createBlogDto.Content" Rows="8" @oninput="UpdateCharCount" placeholder="Share your thoughts, insights, and expertise..." />
                        </div>
                        @if (submitted)
                        {
                            <div class="text-danger small mt-1">@GetFieldError(createBlogDto.Content, "Content", 50, 5000)</div>
                        }
                        <small class="text-muted">Characters: @GetCharCount(createBlogDto.Content)/5000</small>
                    </div>

                    <!-- Featured Image -->
                    <div class="mb-4">
                        <label class="form-label fw-semibold">Featured Image URL</label>
                        <div class="input-group">
                            <span class="input-group-text bg-light border-0">
                                <i class="bi bi-image"></i>
                            </span>
                            <InputText class="form-control rounded-end" @bind-Value="createBlogDto.FeaturedImageUrl" placeholder="Paste image URL..." />
                        </div>
                    </div>

                    <!-- Meta Description -->
                    <div class="mb-4">
                        <label class="form-label fw-semibold">Meta Description</label>
                        <div class="input-group">
                            <span class="input-group-text bg-light border-0">
                                <i class="bi bi-tags"></i>
                            </span>
                            <InputText class="@GetInputClass(createBlogDto.MetaDescription, 50, 160)" @bind-Value="createBlogDto.MetaDescription" @oninput="UpdateCharCount" placeholder="SEO-friendly description (appears in search results)..." />
                        </div>
                        @if (submitted)
                        {
                            <div class="text-danger small mt-1">@GetFieldError(createBlogDto.MetaDescription, "Meta Description", 50, 160)</div>
                        }
                        <small class="text-muted">Characters: @GetCharCount(createBlogDto.MetaDescription)/160</small>
                    </div>

                    <!-- Categories (Modern Multi-select) -->
                    <div class="mb-4">
                        <label class="form-label fw-semibold d-flex align-items-center">
                            <i class="bi bi-folder2 me-2"></i> Categories
                        </label>
                        <div class="category-selection-container">
                            <select class="form-select rounded-3 category-multiselect" multiple @onchange="OnCategoryChange">
                                @foreach (var category in categories)
                                {
                                    <option value="@category.Id" selected="@createBlogDto.CategoryIds.Contains(category.Id)">
                                        @category.Name
                                    </option>
                                }
                            </select>
                            
                            <!-- Selected Categories as Tags -->
                            <div class="selected-categories mt-3">
                                @if (createBlogDto.CategoryIds.Any())
                                {
                                    @foreach (var id in createBlogDto.CategoryIds)
                                    {
                                        var category = categories.FirstOrDefault(c => c.Id == id);
                                        if (category != null)
                                        {
                                            <span class="category-tag">
                                                <i class="bi bi-tag-fill me-1"></i> @category.Name
                                            </span>
                                        }
                                    }
                                }
                                else
                                {
                                    <span class="text-muted fst-italic">No categories selected</span>
                                }
                            </div>
                        </div>
                        <small class="text-muted mt-2 d-block">
                            <i class="bi bi-info-circle me-1"></i>
                            Hold Ctrl (Windows) or Cmd (Mac) to select multiple categories
                        </small>
                        @if (submitted && !createBlogDto.CategoryIds.Any())
                        {
                            <div class="text-danger small mt-1">At least one category must be selected.</div>
                        }
                    </div>

                    <hr class="my-4" />

                    <!-- Publish Switch -->
                    <div class="form-check form-switch mb-4">
                        <InputCheckbox class="form-check-input" id="publishSwitch" @bind-Value="createBlogDto.IsPublished" />
                        <label class="form-check-label" for="publishSwitch">
                            <span class="fw-medium">@(createBlogDto.IsPublished ? "Publish immediately" : "Save as draft")</span>
                        </label>
                    </div>

                    <!-- Bottom Buttons -->
                    <div class="d-flex gap-3 justify-content-end mt-4">
                        <button type="button" class="btn btn-outline-secondary px-4 py-2 rounded-3 fw-semibold" @onclick="DiscardBlog">
                            <i class="bi bi-x-circle me-2"></i> Discard
                        </button>
                        <button type="submit" class="btn btn-primary px-4 py-2 rounded-3 fw-semibold">
                            <i class="bi bi-upload me-2"></i> @(createBlogDto.IsPublished ? "Publish Blog" : "Save Draft")
                        </button>
                    </div>
                }
            </EditForm>
        </div>
    </div>
</div>

<style>
    /* Modern Form Styling */
    .card {
        box-shadow: 0 10px 30px rgba(0,0,0,0.1) !important;
    }
    
    .bg-gradient-primary {
        background: linear-gradient(135deg, #0d6efd 0%, #0a58ca 100%);
    }
    
    .form-label {
        font-size: 1rem;
        color: #495057;
        margin-bottom: 0.5rem;
    }
    
    .input-group {
        box-shadow: 0 2px 10px rgba(0,0,0,0.04);
        border-radius: 0.5rem;
        overflow: hidden;
    }
    
    .input-group-text {
        border: none;
        background-color: #f8f9fa;
        color: #6c757d;
        font-size: 1.2rem;
        padding: 0.75rem;
    }
    
    .form-control, .form-select {
        border: 1px solid #e9ecef;
        padding: 0.75rem;
        font-size: 1rem;
    }
    
    .form-control:focus, .form-select:focus {
        box-shadow: 0 0 0 0.25rem rgba(13, 110, 253, 0.15);
        border-color: #86b7fe;
    }
    
    /* Category Multiselect Styling */
    .category-multiselect {
        min-height: 120px;
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        transition: all 0.2s;
    }
    
    .category-multiselect:focus {
        background-color: #fff;
    }
    
    .category-selection-container {
        border-radius: 0.5rem;
        overflow: hidden;
    }
    
    .selected-categories {
        display: flex;
        flex-wrap: wrap;
        gap: 0.5rem;
        min-height: 2rem;
        padding: 0.5rem 0;
    }
    
    .category-tag {
        display: inline-flex;
        align-items: center;
        background: linear-gradient(45deg, #0d6efd 0%, #0a58ca 100%);
        color: white;
        padding: 0.5rem 1rem;
        border-radius: 2rem;
        font-size: 0.85rem;
        font-weight: 500;
        box-shadow: 0 2px 5px rgba(13, 110, 253, 0.2);
        animation: fadeIn 0.3s ease-out;
    }
    
    /* Button Styling */
    .btn {
        transition: all 0.2s;
    }
    
    .btn-primary {
        background: linear-gradient(45deg, #0d6efd 0%, #0a58ca 100%);
        border: none;
        box-shadow: 0 4px 10px rgba(13, 110, 253, 0.3);
    }
    
    .btn-primary:hover {
        transform: translateY(-2px);
        box-shadow: 0 6px 15px rgba(13, 110, 253, 0.4);
    }
    
    .btn-outline-secondary {
        border: 1px solid #6c757d;
    }
    
    .btn-outline-secondary:hover {
        background-color: #f8f9fa;
        color: #212529;
    }
    
    /* Form Check Switch */
    .form-check-input {
        width: 3rem;
        height: 1.5rem;
        margin-top: 0.25rem;
        background-color: #e9ecef;
        border-color: #ced4da;
    }
    
    .form-check-input:checked {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }
    
    /* Animations */
    @* @keyframes fadeIn {
        from { opacity: 0; transform: translateY(5px); }
        to { opacity: 1; transform: translateY(0); }
    } *@
</style>

@code {
    private CreateBlogDto createBlogDto = new();
    private List<CategoryDto> categories = new();
    private bool loadingCategories = true;
    private string? CurrentUserId;
    private bool submitted = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadUser();
        await LoadCategories();
    }

    private async Task LoadUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            Navigation.NavigateTo("/", true);
        }

        if (user.Identity?.IsAuthenticated == true)
        {
            CurrentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
    }

    private async Task LoadCategories()
    {
        loadingCategories = true;
        categories = (await CategoryService.GetAllCategoriesAsync()).ToList();
        loadingCategories = false;
    }

    private void OnCategoryChange(ChangeEventArgs e)
    {
        createBlogDto.CategoryIds.Clear();
        if (e.Value is not null)
        {
            var selected = e.Value as IEnumerable<string> ?? Array.Empty<string>();
            foreach (var val in selected)
            {
                if (int.TryParse(val, out int id))
                    createBlogDto.CategoryIds.Add(id);
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        submitted = true;

        if (string.IsNullOrEmpty(CurrentUserId)) return;
        if (!IsFormValid()) return;

        var result = await BlogService.CreateBlogAsync(createBlogDto, CurrentUserId);
        if (result != null)
            NavManager.NavigateTo("/blogs");
    }

    private async Task DiscardBlog()
    {
        if (await JS.InvokeAsync<bool>("confirm", "Are you sure you want to discard all changes?"))
            createBlogDto = new CreateBlogDto();
    }

    private void BackToBlogs()
    {
        NavManager.NavigateTo("/blogs");
    }

    private void UpdateCharCount(ChangeEventArgs e) => StateHasChanged();

    // Validation helpers
    private string GetInputClass(string? value, int min, int max)
    {
        if (!submitted) return "form-control rounded-end";

        return string.IsNullOrEmpty(value) || (value.Length >= min && value.Length <= max)
            ? "form-control rounded-end"
            : "form-control rounded-end border border-danger";
    }

    private string GetFieldError(string? value, string fieldName, int min, int max)
    {
        if (string.IsNullOrWhiteSpace(value))
            return $"{fieldName} is required (min {min} characters).";

        if (value.Length < min)
            return $"{fieldName} must be at least {min} characters.";

        if (value.Length > max)
            return $"{fieldName} cannot exceed {max} characters.";

        return string.Empty;
    }

    private int GetCharCount(string? value) => string.IsNullOrEmpty(value) ? 0 : value.Length;

    private bool IsFormValid()
    {
        return string.IsNullOrWhiteSpace(GetFieldError(createBlogDto.Title, "Title", 5, 100)) &&
               string.IsNullOrWhiteSpace(GetFieldError(createBlogDto.Summary, "Summary", 20, 250)) &&
               string.IsNullOrWhiteSpace(GetFieldError(createBlogDto.Content, "Content", 50, 5000)) &&
               string.IsNullOrWhiteSpace(GetFieldError(createBlogDto.MetaDescription, "Meta Description", 50, 160)) &&
               createBlogDto.CategoryIds.Any();
    }
}
