@page "/blogs/details/{BlogId:int}"
@using BlazorAuthApp.DTOs
@using BlazorAuthApp.Model
@using BlazorAuthApp.Interfaces
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@inject IBlogService BlogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>@(blog?.Title ?? "Blog Details")</PageTitle>

<div class="container my-4">
    <button class="btn btn-secondary mb-4 px-4 py-2 rounded-3 shadow-sm" @onclick="BackToBlogs">
        <i class="bi bi-arrow-left-circle me-2"></i> Back to All Blogs
    </button>

    @if (loading)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary" role="status" style="width: 3rem; height: 3rem;">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="text-muted mt-3">Loading blog...</p>
        </div>
    }
    else if (blog == null)
    {
        <div class="text-center py-5">
            <i class="bi bi-exclamation-triangle text-warning" style="font-size: 4rem;"></i>
            <h3 class="text-muted mt-3">Blog not found</h3>
            <p class="text-muted">The blog you're looking for doesn't exist or has been removed.</p>
        </div>
    }
    else
    {
        <!-- Main Blog Card -->
        <div class="card shadow border-0 rounded-4 overflow-hidden mb-4">
            @if (!string.IsNullOrEmpty(blog.FeaturedImageUrl))
            {
                <div class="position-relative">
                    <img src="@blog.FeaturedImageUrl" class="card-img-top" alt="@blog.Title" style="height: 300px; object-fit: cover;" />
                    <div class="position-absolute top-0 end-0 m-3">
                        @if (blog.IsPublished)
                        {
                            <span class="badge bg-success bg-opacity-90 text-white px-3 py-2 rounded-pill">
                                <i class="bi bi-check-circle me-1"></i> Published
                            </span>
                        }
                        else
                        {
                            <span class="badge bg-secondary bg-opacity-90 text-white px-3 py-2 rounded-pill">
                                <i class="bi bi-eye-slash me-1"></i> Draft
                            </span>
                        }
                    </div>
                </div>
            }

            <div class="card-body p-4">
                <h1 class="card-title fw-bold mb-3 display-5">@blog.Title</h1>

                @if (!string.IsNullOrEmpty(blog.Summary))
                {
                    <h5 class="text-muted mb-4 fw-normal">@blog.Summary</h5>
                }

                <!-- Author and Meta Info -->
                <div class="d-flex align-items-center mb-4 p-3 bg-light rounded-3">
                    <div class="me-3">
                        <div class="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center" style="width: 50px; height: 50px;">
                            <i class="bi bi-person-fill fs-4"></i>
                        </div>
                    </div>
                    <div class="flex-grow-1">
                        <h6 class="mb-1 fw-bold">@blog.AuthorName</h6>
                        <small class="text-muted d-flex flex-wrap align-items-center">
                            <i class="bi bi-calendar me-1"></i>
                            @blog.CreatedAtLoal.ToString("MMMM dd, yyyy")

                            @if (blog.PublishedAtLocal.HasValue)
                            {
                                <span class="mx-2">•</span>
                                <span class="d-flex align-items-center">
                                    <i class="bi bi-broadcast me-1"></i>
                                    Published @blog.PublishedAtLocal.Value.ToString("MMMM dd, yyyy")
                                </span>
                            }
                        </small>
                    </div>
                    <div class="text-end">
                        <div class="badge bg-primary text-white px-3 py-2 rounded-pill">
                            <i class="bi bi-clock me-1"></i> @blog.EstimatedReadTime min read
                        </div>
                    </div>
                </div>

                <!-- Categories -->
                @if (blog.Categories != null && blog.Categories.Any())
                {
                    <div class="mb-4">
                        <h6 class="fw-bold mb-2">Categories</h6>
                        <div class="d-flex flex-wrap gap-2">
                            @foreach (var category in blog.Categories)
                            {
                                <span class="badge bg-primary bg-opacity-10 text-primary px-3 py-2 rounded-pill border border-primary border-opacity-25">
                                    <i class="bi bi-tag me-1"></i>@category.Name
                                </span>
                            }
                        </div>
                    </div>
                }

                <!-- Content -->
                <div class="mb-4">
                    <h6 class="fw-bold mb-3">Content</h6>
                    <div class="border rounded-3 p-4 bg-white shadow-sm" style="white-space: pre-wrap; line-height: 1.8;">
                        @blog.Content
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(blog.MetaDescription))
                {
                    <div class="mb-4 p-3 bg-info bg-opacity-10 rounded-3 border-start border-info border-4">
                        <h6 class="fw-bold text-info mb-2">
                            <i class="bi bi-info-circle me-2"></i>Meta Description
                        </h6>
                        <p class="text-muted mb-0">@blog.MetaDescription</p>
                    </div>
                }

                <!-- Stats Row -->
                <div class="d-flex gap-4 mb-4 p-3 bg-light rounded-3">
                    <div class="text-center">
                        <div class="fw-bold fs-5 text-primary">@blog.ViewCount</div>
                        <small class="text-muted">
                            <i class="bi bi-eye me-1"></i>Views
                        </small>
                    </div>
                    <div class="text-center">
                        @if (blog.IsOwner)
                        {
                            <div class="fw-bold fs-5 text-danger text-decoration-none" style="cursor:pointer;" @onclick="ShowLikers">
                                @blog.LikeCount
                            </div>
                        }
                        else
                        {
                            <div class="fw-bold fs-5 text-danger">@blog.LikeCount</div>
                        }
                        <small class="text-muted">
                            <i class="bi bi-heart me-1"></i> Likes
                        </small>
                    </div>

                    <div class="text-center">
                        <div class="fw-bold fs-5 text-success">@blog.CommentCount</div>
                        <small class="text-muted">
                            <i class="bi bi-chat me-1"></i>Comments
                        </small>
                    </div>
                </div>

                <!-- Action Buttons -->
                @if (!string.IsNullOrEmpty(CurrentUserId))
                {
                    <div class="d-flex gap-3 mb-4">
                        <button class="btn @(blog.IsLikedByCurrentUser ? "btn-danger" : "btn-outline-danger") px-4 py-2 rounded-pill shadow-sm"
                                @onclick="ToggleLike" disabled="@likingInProgress">
                            @if (likingInProgress)
                            {
                                <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                            }
                            else
                            {
                                <i class="bi bi-heart@(blog.IsLikedByCurrentUser ? "-fill" : "") me-2"></i>
                            }
                            @(blog.IsLikedByCurrentUser ? "Unlike" : "Like")
                        </button>

                        <button class="btn btn-outline-primary px-4 py-2 rounded-pill shadow-sm" @onclick="ScrollToComments">
                            <i class="bi bi-chat me-2"></i>Comment (@blog.CommentCount)
                        </button>
                    </div>
                }
                else
                {
                    <div class="alert alert-info rounded-3" role="alert">
                        <i class="bi bi-info-circle me-2"></i>
                        <a href="/Account/Login" class="alert-link">Sign in</a> to like and comment on this blog.
                    </div>
                }
            </div>
        </div>

        <!-- Comments Section -->
        <div class="card shadow border-0 rounded-4" id="comments-section">
            <div class="card-header bg-white border-0 p-4">
                <h4 class="mb-0 fw-bold">
                    <i class="bi bi-chat-dots me-2 text-primary"></i>
                    Comments (@blog.CommentCount)
                </h4>
            </div>
            <div class="card-body p-4">
                @if (!string.IsNullOrEmpty(CurrentUserId))
                {
                    <div class="mb-4 p-4 bg-light rounded-3">
                        <h6 class="fw-bold mb-3">Add a comment</h6>
                        <textarea class="form-control border-0 shadow-sm rounded-3 mb-2"
                                  rows="4"
                                  @bind="newCommentContent"
                                  placeholder="Share your thoughts..."
                                  maxlength="1000"></textarea>
                        <div class="d-flex justify-content-between align-items-center">
                            <small class="text-muted">
                                <i class="bi bi-info-circle me-1"></i>
                                Be respectful and constructive.
                            </small>
                            <button class="btn btn-primary px-4 py-2 rounded-pill shadow-sm"
                                    @onclick="AddComment"
                                    disabled="@(commentingInProgress || string.IsNullOrWhiteSpace(newCommentContent))">
                                @if (commentingInProgress)
                                {
                                    <span>
                                        <div class="spinner-border spinner-border-sm me-2" role="status"></div>
                                        Posting...
                                    </span>
                                }
                                else
                                {
                                    <span>
                                        <i class="bi bi-send me-2"></i>
                                        Post Comment
                                    </span>
                                }
                            </button>

                        </div>
                    </div>
                }

                <!-- Comments List -->
                @if (comments != null && comments.Any())
                {
                    <div class="comments-list">
                        @foreach (var comment in comments)
                        {
                            <div class="comment-item border-bottom pb-4 mb-4">
                                <div class="d-flex align-items-start gap-3">
                                    <div class="flex-shrink-0">
                                        <div class="bg-secondary text-white rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                            <i class="bi bi-person-fill"></i>
                                        </div>
                                    </div>
                                    <div class="flex-grow-1">
                                        <div class="d-flex justify-content-between align-items-center mb-2">
                                            <div>
                                                <h6 class="mb-0 fw-bold">@comment.UserName</h6>
                                                <small class="text-muted">
                                                    <i class="bi bi-clock me-1"></i>
                                                    @comment.CreatedAtLocal.ToString("MMM dd, yyyy 'at' h:mm tt")
                                                    @if (comment.UpdatedAtLocal.HasValue)
                                                    {
                                                        <span class="mx-1">•</span>
                                                        <em>edited</em>
                                                    }
                                                </small>
                                            </div>
                                        </div>
                                        <p class="mb-0" style="white-space: pre-wrap;">@comment.Content</p>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="text-center py-5 text-muted">
                        <i class="bi bi-chat-square-text" style="font-size: 3rem; opacity: 0.5;"></i>
                        <h5 class="mt-3">No comments yet</h5>
                        <p>Be the first to share your thoughts!</p>
                    </div>
                }
            </div>
        </div>

        <!-- Likers Modal -->
        @if (showLikersModal && likers != null)
        {
            <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
                <div class="modal-dialog modal-dialog-centered modal-lg">
                    <div class="modal-content rounded-4 shadow-lg">
                        <div class="modal-header bg-primary text-white rounded-top-4">
                            <h5 class="modal-title">
                                <i class="bi bi-heart-fill me-2"></i>
                                People who liked this blog
                            </h5>
                            <button type="button" class="btn-close btn-close-white" @onclick="CloseLikersModal"></button>
                        </div>
                        <div class="modal-body p-4">
                            @if (!likers.Any())
                            {
                                <div class="text-center text-muted py-4">
                                    <i class="bi bi-person-x" style="font-size: 3rem;"></i>
                                    <p class="mt-3 mb-0">No one has liked this blog yet.</p>
                                </div>
                            }
                            else
                            {
                                <div class="list-group">
                                    @foreach (var liker in likers)
                                    {
                                        <div class="list-group-item d-flex align-items-center justify-content-between">
                                            <div class="d-flex align-items-center gap-3">
                                                <div class="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center" style="width: 40px; height: 40px;">
                                                    <i class="bi bi-person-fill"></i>
                                                </div>
                                                <span class="fw-bold">@liker.UserName</span>
                                            </div>
                                            <small class="text-muted">@liker.LikedAtLocal.ToString("MMM dd, yyyy 'at' h:mm tt")</small>
                                        </div>
                                    }
                                </div>
                            }
                        </div>
                        <div class="modal-footer">
                            <button class="btn btn-secondary rounded-pill px-4" @onclick="CloseLikersModal">Close</button>
                        </div>
                    </div>
                </div>
            </div>
        }

        <!-- Scroll To Top Button -->
        <button id="scrollToTopBtn" class="btn btn-primary rounded-circle shadow-lg scroll-to-top-btn"
                @onclick="ScrollToTop"
                title="Scroll to Top">
            <i class="bi bi-arrow-up fs-4"></i>
        </button>
    }
</div>

@code {
    [Parameter] public int BlogId { get; set; }
    private BlogDto? blog;
    private List<BlogCommentDto> comments = new();
    private List<BlogLikeDto> likers = new();
    private bool loading = true;
    private bool likingInProgress = false;
    private bool commentingInProgress = false;
    private string? CurrentUserId;
    private string newCommentContent = string.Empty;
    private bool showLikersModal = false;

    protected override async Task OnInitializedAsync()
    {
        loading = true;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            Navigation.NavigateTo("/", true);
        }

        if (user.Identity?.IsAuthenticated == true)
        {
            CurrentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }

        blog = await BlogService.GetBlogByIdAsync(BlogId, CurrentUserId);

        if (blog != null)
        {
            comments = (await BlogService.GetBlogCommentsAsync(BlogId, CurrentUserId)).ToList();

            if (blog.AuthorId != CurrentUserId)
            {
                var response = await BlogService.IncrementViewCountAsync(BlogId);
                if (response) blog.ViewCount += 1;
            }
        }

        loading = false;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initScrollButton", "scrollToTopBtn");
        }
    }

    private async Task ShowLikers()
    {
        if (blog == null || string.IsNullOrEmpty(CurrentUserId)) return;
        if (blog.AuthorId != CurrentUserId) return;

        likers = (await BlogService.GetBlogLikesAsync(blog.Id, CurrentUserId)).ToList();
        showLikersModal = true;
    }

    private void CloseLikersModal() => showLikersModal = false;

    private async Task ToggleLike()
    {
        if (string.IsNullOrEmpty(CurrentUserId) || blog == null || likingInProgress) return;

        likingInProgress = true;
        try
        {
            var success = await BlogService.ToggleLikeAsync(blog.Id, CurrentUserId);
            if (success)
            {
                blog.IsLikedByCurrentUser = !blog.IsLikedByCurrentUser;
                blog.LikeCount += blog.IsLikedByCurrentUser ? 1 : -1;
            }
        }
        finally { likingInProgress = false; }
    }

    private async Task AddComment()
    {
        if (string.IsNullOrWhiteSpace(newCommentContent) || string.IsNullOrEmpty(CurrentUserId) || blog == null || commentingInProgress)
            return;

        commentingInProgress = true;
        try
        {
            var newComment = await BlogService.AddCommentAsync(blog.Id, newCommentContent.Trim(), CurrentUserId);
            if (newComment != null)
            {
                comments.Add(newComment);
                blog.CommentCount += 1;
                newCommentContent = string.Empty;
                StateHasChanged();
                await Task.Delay(100);
                await JSRuntime.InvokeVoidAsync("scrollToElement", "comments-section");
            }
        }
        finally { commentingInProgress = false; }
    }

    private async Task ScrollToComments() => await JSRuntime.InvokeVoidAsync("scrollToElement", "comments-section");
    private async Task ScrollToTop() => await JSRuntime.InvokeVoidAsync("scrollToTopSmooth");
    private void BackToBlogs() => Navigation.NavigateTo("/blogs");
}

<script>
    window.scrollToElement = (elementId) => {
        const el = document.getElementById(elementId);
        if (el) el.scrollIntoView({ behavior: 'smooth' });
    };

    window.initScrollButton = (btnId) => {
        const btn = document.getElementById(btnId);
        window.addEventListener('scroll', () => {
            btn.style.display = window.scrollY > 200 ? 'flex' : 'none';
        });
    };

    window.scrollToTopSmooth = () => window.scrollTo({ top: 0, behavior: 'smooth' });
</script>

<style>
    .scroll-to-top-btn {
        position: fixed;
        bottom: 20px;
        right: 20px;
        width: 60px;
        height: 60px;
        display: none;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        transition: background-color 0.3s, transform 0.3s;
    }

        .scroll-to-top-btn:hover {
            background-color: #0a58ca;
            transform: translateY(-2px);
        }
</style>
