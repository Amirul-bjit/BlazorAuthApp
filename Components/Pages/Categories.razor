@page "/categories"
@using BlazorAuthApp.DTOs
@using BlazorAuthApp.Interfaces
@using BlazorAuthApp.Shared.Pagination
@using Microsoft.AspNetCore.Authorization
@inject ICategoryService CategoryService
@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@attribute [Authorize]

<div class="container py-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <div>
            <h2 class="fw-bold mb-1">Categories</h2>
            <p class="text-muted">Manage your blog categories</p>
        </div>
        <button class="btn btn-primary rounded-3 shadow-sm d-flex align-items-center" @onclick="ShowCreateModal">
            <i class="bi bi-plus-lg me-2"></i> Create Category
        </button>
    </div>

    @if (loading)
    {
        <div class="d-flex justify-content-center my-5">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!categories.Any())
    {
        <div class="card border-0 shadow-sm rounded-4 p-5 text-center my-5">
            <div class="py-4">
                <i class="bi bi-tag-fill text-muted" style="font-size: 3rem;"></i>
                <h4 class="mt-3 mb-2">No categories found</h4>
                <p class="text-muted mb-4">Create your first category to organize your blogs</p>
                <button class="btn btn-primary rounded-3 px-4" @onclick="ShowCreateModal">
                    <i class="bi bi-plus-lg me-2"></i>Create Category
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover table-bordered shadow-sm rounded-4 category-table">
                <thead class="table-dark rounded-4">
                    <tr>
                        <th class="align-middle">Name</th>
                        <th class="align-middle">Description</th>
                        <th class="align-middle">Status</th>
                        <th class="align-middle" style="width:150px">Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var category in categories)
                    {
                        <tr class="align-middle">
                            <td class="fw-semibold">@category.Name</td>
                            <td class="text-muted">@(!string.IsNullOrEmpty(category.Description) ? category.Description : "No description")</td>
                            <td>
                                @if (category.IsActive)
                                {
                                    <span class="badge status-badge bg-success-subtle text-success">Active</span>
                                }
                                else
                                {
                                    <span class="badge status-badge bg-danger-subtle text-danger">Inactive</span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm btn-light rounded-3 me-2" @onclick="() => ShowUpdateModal(category)">
                                    <i class="bi bi-pencil-fill"></i>
                                </button>
                                <button class="btn btn-sm btn-outline-danger rounded-3" @onclick="() => DeleteCategory(category.Id)">
                                    <i class="bi bi-trash-fill"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
        <!-- Pagination Bar -->
        <div class="d-flex justify-content-between align-items-center flex-wrap gap-3 mt-4">
            <div class="d-flex align-items-center">
                <span class="me-2">Show</span>
                <select class="form-select form-select-sm" style="width: 70px;" @onchange="OnPageSizeChanged">
                    @foreach (var size in pageSizes)
                    {
                        <option value="@size" selected="@(pageSize == size)">@size</option>
                    }
                </select>
                <span class="ms-2">items</span>
            </div>
            <div class="text-muted">
                Showing @((currentPage - 1) * pageSize + 1)-@Math.Min(currentPage * pageSize, totalCount) of @totalCount items
            </div>
            <div>
                <nav aria-label="Page navigation">
                    <ul class="pagination pagination-sm mb-0">
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="async () => await ChangePage(1)" disabled="@(currentPage == 1)">
                                <i class="bi bi-chevron-double-left"></i>
                            </button>
                        </li>
                        <li class="page-item @(currentPage == 1 ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage - 1)" disabled="@(currentPage == 1)">
                                <i class="bi bi-chevron-left"></i>
                            </button>
                        </li>
                        @foreach (var pageItem in GetVisiblePages())
                        {
                            <li class="page-item @(pageItem == currentPage ? "active" : "")">
                                <button class="page-link" @onclick="() => ChangePage(pageItem)">
                                    @pageItem
                                </button>
                            </li>
                        }
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(currentPage + 1)" disabled="@(currentPage == totalPages)">
                                <i class="bi bi-chevron-right"></i>
                            </button>
                        </li>
                        <li class="page-item @(currentPage == totalPages ? "disabled" : "")">
                            <button class="page-link" @onclick="() => ChangePage(totalPages)" disabled="@(currentPage == totalPages)">
                                <i class="bi bi-chevron-double-right"></i>
                            </button>
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    }
</div>

<!-- Create Modal -->
<div class="modal fade @(isCreateModalVisible ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow rounded-4">
            <div class="modal-header border-0 pb-0">
                <h5 class="modal-title fw-bold">Create Category</h5>
                <button type="button" class="btn-close" @onclick="CloseCreateModal"></button>
            </div>
            <div class="modal-body p-4">
                <div class="mb-3">
                    <label class="form-label fw-medium">Name</label>
                    <div class="input-group shadow-sm rounded-3 overflow-hidden">
                        <span class="input-group-text bg-light border-0">
                            <i class="bi bi-tag"></i>
                        </span>
                        <input class="form-control border-0 py-2" 
                               @bind="createDto.Name" 
                               placeholder="Enter category name" />
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-medium">Description</label>
                    <div class="input-group shadow-sm rounded-3 overflow-hidden">
                        <span class="input-group-text bg-light border-0">
                            <i class="bi bi-text-paragraph"></i>
                        </span>
                        <textarea class="form-control border-0 py-2" 
                                  @bind="createDto.Description" 
                                  rows="3"
                                  placeholder="Enter description"></textarea>
                    </div>
                </div>
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="activeSwitch" @bind="createDto.IsActive" />
                    <label class="form-check-label" for="activeSwitch">
                        <span class="fw-medium">Status:</span> @(createDto.IsActive ? "Active" : "Inactive")
                    </label>
                </div>
            </div>
            <div class="modal-footer border-0 pt-0">
                <button class="btn btn-light rounded-3" @onclick="CloseCreateModal">Cancel</button>
                <button class="btn btn-primary rounded-3 px-4" @onclick="CreateCategoryAsync">Create</button>
            </div>
        </div>
    </div>
</div>

<!-- Update Modal -->
<div class="modal fade @(isUpdateModalVisible ? "show d-block" : "")" tabindex="-1" style="background-color: rgba(0,0,0,0.5);">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content border-0 shadow rounded-4">
            <div class="modal-header border-0 pb-0">
                <h5 class="modal-title fw-bold">Update Category</h5>
                <button type="button" class="btn-close" @onclick="CloseUpdateModal"></button>
            </div>
            <div class="modal-body p-4">
                <div class="mb-3">
                    <label class="form-label fw-medium">Name</label>
                    <div class="input-group shadow-sm rounded-3 overflow-hidden">
                        <span class="input-group-text bg-light border-0">
                            <i class="bi bi-tag"></i>
                        </span>
                        <input class="form-control border-0 py-2" 
                               @bind="updateDto.Name" 
                               placeholder="Enter category name" />
                    </div>
                </div>
                <div class="mb-3">
                    <label class="form-label fw-medium">Description</label>
                    <div class="input-group shadow-sm rounded-3 overflow-hidden">
                        <span class="input-group-text bg-light border-0">
                            <i class="bi bi-text-paragraph"></i>
                        </span>
                        <textarea class="form-control border-0 py-2" 
                                  @bind="updateDto.Description" 
                                  rows="3"
                                  placeholder="Enter description"></textarea>
                    </div>
                </div>
                <div class="form-check form-switch">
                    <input class="form-check-input" type="checkbox" id="updateActiveSwitch" @bind="updateDto.IsActive" />
                    <label class="form-check-label" for="updateActiveSwitch">
                        <span class="fw-medium">Status:</span> @(updateDto.IsActive ? "Active" : "Inactive")
                    </label>
                </div>
            </div>
            <div class="modal-footer border-0 pt-0">
                <button class="btn btn-light rounded-3" @onclick="CloseUpdateModal">Cancel</button>
                <button class="btn btn-primary rounded-3 px-4" @onclick="UpdateCategoryAsync">Save Changes</button>
            </div>
        </div>
    </div>
</div>

@code {
    private List<CategoryDto> categories = new();
    private bool loading = true;

    private bool isCreateModalVisible = false;
    private bool isUpdateModalVisible = false;

    private CreateCategoryDto createDto = new();
    private UpdateCategoryDto updateDto = new();

    // Pagination state
    private int currentPage = 1;
    private int pageSize = 10;
    private int totalCount = 0;
    private int totalPages => (int)Math.Ceiling(totalCount / (double)pageSize);
    private int[] pageSizes = new[] { 5, 10, 20, 50 };

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        if (!user.Identity?.IsAuthenticated ?? true)
        {
            Navigation.NavigateTo("/", true); // redirect to home if not logged in
        }
        await LoadCategories();
    }

    private async Task LoadCategories()
    {
        loading = true;
        var request = new PagedRequestDto
        {
            SkipCount = (currentPage - 1) * pageSize,
            MaxResultCount = pageSize,
            Filter = null,
            Sorting = "name"
        };

        var result = await CategoryService.GetPagedCategoriesAsync(request);
        categories = result.Items.ToList();
        totalCount = result.TotalCount;
        loading = false;
    }

    private void ShowCreateModal()
    {
        createDto = new CreateCategoryDto();
        isCreateModalVisible = true;
    }

    private void CloseCreateModal() => isCreateModalVisible = false;

    private async Task CreateCategoryAsync()
    {
        await CategoryService.CreateCategoryAsync(createDto);
        isCreateModalVisible = false;
        await LoadCategories();
    }

    private void ShowUpdateModal(CategoryDto category)
    {
        updateDto = new UpdateCategoryDto
        {
            Id = category.Id,
            Name = category.Name,
            Description = category.Description,
            IsActive = category.IsActive
        };
        isUpdateModalVisible = true;
    }

    private void CloseUpdateModal() => isUpdateModalVisible = false;

    private async Task UpdateCategoryAsync()
    {
        await CategoryService.UpdateCategoryAsync(updateDto);
        isUpdateModalVisible = false;
        await LoadCategories();
    }

    private async Task DeleteCategory(int id)
    {
        if (await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure to delete this category?"))
        {
            await CategoryService.DeleteCategoryAsync(id);
            await LoadCategories();
        }
    }

    private async Task ChangePage(int page)
    {
        if (page < 1 || page > totalPages || page == currentPage)
            return;
        currentPage = page;
        await LoadCategories();
    }

    private async Task OnPageSizeChanged(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int newSize) && newSize != pageSize)
        {
            pageSize = newSize;
            currentPage = 1;
            await LoadCategories();
        }
    }

    private List<int> GetVisiblePages()
    {
        var pages = new List<int>();
        int startPage = Math.Max(1, currentPage - 2);
        int endPage = Math.Min(totalPages, startPage + 4);
        if (endPage - startPage < 4 && startPage > 1)
        {
            startPage = Math.Max(1, endPage - 4);
        }
        for (int i = startPage; i <= endPage; i++)
        {
            pages.Add(i);
        }
        return pages;
    }
}

<style>
    .category-table {
        border-radius: 1rem;
        overflow: hidden;
        background: #fff;
    }
    .category-table th {
        font-weight: 600;
        font-size: 1rem;
        background: #212529;
        color: #fff;
        border: none;
        padding: 1rem 0.75rem;
    }
    .category-table td {
        background: #f8f9fa;
        border: none;
        padding: 0.85rem 0.75rem;
        vertical-align: middle;
    }
    .category-table tr {
        transition: background 0.2s;
    }
    .category-table tbody tr:hover {
        background: #e9ecef;
    }
    .status-badge {
        font-size: 0.95rem;
        padding: 0.5em 1.2em;
        border-radius: 1.5em;
        font-weight: 500;
        letter-spacing: 0.02em;
    }
    .btn-light, .btn-outline-danger {
        box-shadow: none !important;
    }
    .btn-light:hover {
        background: #e2e6ea;
    }
    .btn-outline-danger:hover {
        background: #f8d7da;
        color: #dc3545;
    }
    .modal-content {
        animation: fadeIn 0.3s;
    }
    .pagination .page-link {
        border-radius: 0.25rem;
        margin: 0 2px;
        min-width: 32px;
        text-align: center;
    }
    .pagination .page-item.active .page-link {
        background: #0d6efd;
        color: #fff;
        border-color: #0d6efd;
    }
    .pagination .page-link:focus {
        box-shadow: 0 0 0 0.15rem rgba(13, 110, 253, 0.25);
    }
</style>
