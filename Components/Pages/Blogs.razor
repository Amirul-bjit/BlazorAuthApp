@page "/blogs"
@using BlazorAuthApp.DTOs
@using BlazorAuthApp.Interfaces
@using System.Security.Claims
@using BlazorAuthApp.Services
@using BlazorAuthApp.Shared
@using Microsoft.AspNetCore.Authorization
@inject IBlogService BlogService
@inject ICategoryService CategoryService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@attribute [Authorize]

<PageTitle>Blog Collection</PageTitle>

<div class="container my-5">
    <!-- Hero Header Section -->
    <div class="row mb-5">
        <div class="col-12">
            <div class="bg-gradient-primary rounded-4 p-5 text-white position-relative overflow-hidden shadow-lg">
                <div class="position-absolute top-0 end-0 opacity-25">
                    <i class="bi bi-journal-text" style="font-size: 8rem;"></i>
                </div>
                <div class="position-relative">
                    <h1 class="display-4 fw-bold mb-3">Discover Amazing Stories</h1>
                    <p class="lead mb-4 opacity-90">Explore our collection of insightful blogs, tutorials, and thought-provoking articles from talented writers around the world.</p>
                    <div class="d-flex gap-3 flex-wrap">
                        <button class="btn btn-light btn-lg rounded-pill px-4 py-2 shadow-sm fw-semibold"
                                @onclick="RedirectToCreateBlog">
                            <i class="bi bi-plus-circle-fill me-2"></i> Write Your Story
                        </button>
                        @if (blogs != null)
                        {
                            <div class="btn btn-outline-light btn-lg rounded-pill px-4 py-2 fw-semibold">
                                <i class="bi bi-collection me-2"></i> @blogs.Count() Articles Available
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>

    
    <!-- Loading State -->
    @if (blogs == null)
    {
        <div class="text-center py-5">
            <div class="spinner-border text-primary mb-3" style="width: 3rem; height: 3rem;" role="status">
                <span class="visually-hidden">Loading blogs...</span>
            </div>
            <h5 class="text-muted">Loading amazing content...</h5>
            <p class="text-muted">We're fetching the latest blogs for you</p>
        </div>
    }
    @* else if (!blogs.Any())
    {
        <!-- Empty State -->
        <div class="text-center py-5">
            <div class="bg-light rounded-4 p-5 mx-auto" style="max-width: 500px;">
                <i class="bi bi-journal-plus text-muted mb-3" style="font-size: 4rem; opacity: 0.5;"></i>
                <h3 class="text-muted mb-3">No Blogs Yet</h3>
                <p class="text-muted mb-4">Be the first to share your thoughts and create the inaugural blog post!</p>
                <button class="btn btn-primary btn-lg rounded-pill px-4" @onclick="RedirectToCreateBlog">
                    <i class="bi bi-plus-circle me-2"></i> Create First Blog
                </button>
            </div>
        </div>
    } *@
    else
    {
        <!-- Filter and Sort Controls -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="bg-light rounded-3 p-4 shadow-sm">
                    <div class="row align-items-center">
                        <!-- Filter Controls -->
                        <div class="col-md-8">
                            <div class="d-flex gap-3 flex-wrap">
                                <!-- Category Multi-Select Filter -->
                                <div class="dropdown">
                                    <button class="btn btn-outline-secondary dropdown-toggle rounded-pill position-relative"
                                            type="button"
                                            id="categoryFilter"
                                            data-bs-toggle="dropdown"
                                            aria-expanded="false">
                                        <i class="bi bi-funnel me-2"></i>Filter by Category
                                        @if (selectedCategoryIds.Any())
                                        {
                                            <span class="position-absolute top-0 start-100 translate-middle badge rounded-pill bg-primary">
                                                @selectedCategoryIds.Count
                                            </span>
                                        }
                                    </button>
                                    <div class="dropdown-menu p-3" style="min-width: 280px;">
                                        <h6 class="dropdown-header">Select Categories</h6>

                                        @if (categories != null)
                                        {
                                            <!-- Select All / Clear All -->
                                            <div class="d-flex gap-2 mb-2 pb-2 border-bottom">
                                                <button type="button" class="btn btn-sm btn-outline-primary flex-fill" @onclick="SelectAllCategories">
                                                    Select All
                                                </button>
                                                <button type="button" class="btn btn-sm btn-outline-secondary flex-fill" @onclick="ClearAllCategories">
                                                    Clear All
                                                </button>
                                            </div>

                                            <!-- Category Checkboxes -->
                                            @foreach (var category in categories)
                                            {
                                                <div class="form-check mb-2">
                                                    <input class="form-check-input"
                                                           type="checkbox"
                                                           id="category-@category.Id"
                                                           checked="@selectedCategoryIds.Contains(category.Id)"
                                                           @onchange="@((args) => OnCategoryToggle(category.Id, (bool)args.Value!))" />
                                                    <label class="form-check-label" for="category-@category.Id">
                                                        @category.Name
                                                        @if (!string.IsNullOrEmpty(category.Description))
                                                        {
                                                            <small class="text-muted d-block">@category.Description</small>
                                                        }
                                                    </label>
                                                </div>
                                            }
                                        }
                                        else
                                        {
                                            <div class="text-center p-3">
                                                <div class="spinner-border spinner-border-sm me-2"></div>
                                                Loading categories...
                                            </div>
                                        }
                                    </div>
                                </div>

                                <!-- Sort By Dropdown -->
                                <div class="dropdown">
                                    <button class="btn btn-outline-secondary dropdown-toggle rounded-pill"
                                            type="button"
                                            id="sortFilter"
                                            data-bs-toggle="dropdown"
                                            aria-expanded="false">
                                        <i class="bi bi-sort-down me-2"></i>@GetSortDisplayText()
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <button class="dropdown-item @(selectedSortBy == BlogSortBy.Latest ? "active" : "")"
                                                    type="button"
                                                    @onclick="() => OnSortChange(BlogSortBy.Latest)">
                                                <i class="bi bi-calendar-event me-2"></i>Latest First
                                            </button>
                                        </li>
                                        <li>
                                            <button class="dropdown-item @(selectedSortBy == BlogSortBy.MostLiked ? "active" : "")"
                                                    type="button"
                                                    @onclick="() => OnSortChange(BlogSortBy.MostLiked)">
                                                <i class="bi bi-heart me-2"></i>Most Liked
                                            </button>
                                        </li>
                                        <li>
                                            <button class="dropdown-item @(selectedSortBy == BlogSortBy.MostViewed ? "active" : "")"
                                                    type="button"
                                                    @onclick="() => OnSortChange(BlogSortBy.MostViewed)">
                                                <i class="bi bi-eye me-2"></i>Most Viewed
                                            </button>
                                        </li>
                                        <li>
                                            <button class="dropdown-item @(selectedSortBy == BlogSortBy.MostDiscussed ? "active" : "")"
                                                    type="button"
                                                    @onclick="() => OnSortChange(BlogSortBy.MostDiscussed)">
                                                <i class="bi bi-chat me-2"></i>Most Discussed
                                            </button>
                                        </li>
                                    </ul>
                                </div>

                                <!-- Clear All Filters -->
                                @if (selectedCategoryIds.Any())
                                {
                                    <button class="btn btn-outline-danger rounded-pill"
                                            type="button"
                                            @onclick="ClearAllFilters">
                                        <i class="bi bi-x-circle me-2"></i>Clear Filters
                                    </button>
                                }
                            </div>
                        </div>

                        <!-- Results Count -->
                        <div class="col-md-4">
                            <div class="text-end text-muted">
                                <i class="bi bi-collection me-1"></i>
                                Showing @blogs.Count() of @totalBlogsCount articles
                                @if (selectedCategoryIds.Any())
                                {
                                    <div class="small">
                                        Filtered by @selectedCategoryIds.Count category@(selectedCategoryIds.Count > 1 ? "ies" : "")
                                    </div>
                                }
                            </div>
                        </div>
                    </div>

                    <!-- Active Filter Tags -->
                    @if (selectedCategoryIds.Any())
                    {
                        <div class="mt-3 pt-3 border-top">
                            <div class="d-flex flex-wrap gap-2 align-items-center">
                                <small class="text-muted fw-semibold me-2">Active filters:</small>
                                @foreach (var categoryId in selectedCategoryIds)
                                {
                                    var category = categories?.FirstOrDefault(c => c.Id == categoryId);
                                    if (category != null)
                                    {
                                        <span class="badge bg-primary rounded-pill d-flex align-items-center gap-1">
                                            @category.Name
                                            <button type="button"
                                                    class="btn-close btn-close-white"
                                                    style="font-size: 0.6em;"
                                                    @onclick="() => OnCategoryToggle(categoryId, false)"
                                                    aria-label="Remove filter"></button>
                                        </span>
                                    }
                                }
                            </div>
                        </div>
                    }

                </div>
            </div>
        </div>


        <!-- Blog Grid -->
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var blog in blogs)
            {
                <div class="col">
                    <div class="card h-100 border-0 rounded-4 shadow-sm hover-lift position-relative overflow-hidden">

                        <!-- Featured Image -->
                        @if (!string.IsNullOrEmpty(blog.FeaturedImageUrl))
                        {
                            <div class="position-relative">
                                <img src="@blog.FeaturedImageUrl"
                                     class="card-img-top"
                                     alt="@blog.Title"
                                     style="height: 200px; object-fit: cover;" />

                                <!-- Status Badge Overlay -->
                                <div class="position-absolute top-0 end-0 m-3">
                                    @if (blog.IsPublished)
                                    {
                                        <span class="badge bg-success bg-opacity-90 text-white px-2 py-1 rounded-pill">
                                            <i class="bi bi-check-circle me-1"></i>Published
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning bg-opacity-90 text-dark px-2 py-1 rounded-pill">
                                            <i class="bi bi-eye-slash me-1"></i>Draft
                                        </span>
                                    }
                                </div>

                                <!-- Quick Actions Overlay -->
                                @if (blog.IsOwner)
                                {
                                    <div class="position-absolute top-0 start-0 m-3">
                                        <span class="badge bg-primary bg-opacity-90 text-white px-2 py-1 rounded-pill">
                                            <i class="bi bi-person-check me-1"></i>Your Blog
                                        </span>
                                    </div>
                                }

                                <!-- Reading Time Badge -->
                                <div class="position-absolute bottom-0 start-0 m-3">
                                    <span class="badge bg-dark bg-opacity-75 text-white px-2 py-1 rounded-pill">
                                        <i class="bi bi-clock me-1"></i>@blog.EstimatedReadTime min read
                                    </span>
                                </div>
                            </div>
                        }
                        else
                        {
                            <!-- Placeholder for blogs without images -->
                            <div class="bg-gradient-secondary text-white d-flex align-items-center justify-content-center" style="height: 200px;">
                                <div class="text-center">
                                    <i class="bi bi-journal-text" style="font-size: 3rem; opacity: 0.7;"></i>
                                    <div class="mt-2 opacity-75">@blog.EstimatedReadTime min read</div>
                                </div>
                            </div>
                        }

                        <div class="card-body d-flex flex-column p-4">
                            <!-- Blog Title -->
                            <h5 class="card-title fw-bold mb-2 text-truncate-2" title="@blog.Title">
                                @blog.Title
                            </h5>

                            <!-- Blog Summary -->
                            <p class="card-text text-muted mb-3 flex-grow-1 text-truncate-3" style="line-height: 1.6;">
                                @(string.IsNullOrEmpty(blog.Summary) ? "No summary available..." : blog.Summary)
                            </p>

                            <!-- Author Info -->
                            <div class="d-flex align-items-center mb-3 p-2 bg-light rounded-3">
                                <div class="bg-primary text-white rounded-circle d-flex align-items-center justify-content-center me-3"
                                     style="width: 35px; height: 35px;">
                                    <i class="bi bi-person-fill"></i>
                                </div>
                                <div class="flex-grow-1">
                                    <div class="fw-semibold text-truncate">@blog.AuthorName</div>
                                    <small class="text-muted">
                                        @if (blog.IsPublished && blog.PublishedAtLocal != null)
                                        {
                                            var published = blog.PublishedAtLocal.Value;
                                            var now = DateTime.Now;
                                            var today = now.Date;
                                            var yesterday = today.AddDays(-1);

                                            if (published.Date == today)
                                            {
                                                var diff = now - published;
                                                if (diff.TotalHours < 1)
                                                {
                                                    var minutes = Math.Max(1, (int)diff.TotalMinutes);
                                                    <text>@minutes min ago</text>
                                                }
                                                else
                                                {
                                                    <text>@((int)diff.TotalHours) hours ago</text>
                                                }
                                            }
                                            else if (published.Date == yesterday)
                                            {
                                                <text>Yesterday</text>
                                            }
                                            else
                                            {
                                                @published.ToString("MMM dd, yyyy")
                                            }
                                        }
                                        else
                                        {
                                            <text>Draft</text>
                                        }
                                    </small>
                                </div>
                            </div>

                            <!-- Categories -->
                            @if (blog.Categories != null && blog.Categories.Any())
                            {
                                <div class="mb-3">
                                    <div class="d-flex flex-wrap gap-1">
                                        @foreach (var category in blog.Categories.Take(3))
                                        {
                                            <span class="badge bg-primary bg-opacity-10 text-primary px-2 py-1 rounded-pill small">
                                                @category.Name
                                            </span>
                                        }
                                        @if (blog.Categories.Count() > 3)
                                        {
                                            <span class="badge bg-secondary bg-opacity-10 text-secondary px-2 py-1 rounded-pill small">
                                                +@(blog.Categories.Count() - 3) more
                                            </span>
                                        }
                                    </div>
                                </div>
                            }

                            <!-- Action Buttons -->
                            <div class="d-flex gap-2 mb-3">
                                <button class="btn btn-primary btn-sm rounded-pill flex-grow-1 fw-semibold"
                                        @onclick="() => ShowDetails(blog.Id)">
                                    <i class="bi bi-book-open me-1"></i> Read More
                                </button>

                                @if (blog.IsOwner)
                                {
                                    <div class="d-flex gap-1">
                                        <button class="btn btn-warning btn-sm rounded-circle shadow-sm"
                                                @onclick="() => EditBlog(blog.Id)"
                                                title="Edit Blog"
                                                style="width: 32px; height: 32px;">
                                            <i class="bi bi-pencil-fill"></i>
                                        </button>
                                        <button class="btn btn-danger btn-sm rounded-circle shadow-sm"
                                                @onclick="() => DeleteBlog(blog.Id)"
                                                title="Delete Blog"
                                                style="width: 32px; height: 32px;">
                                            <i class="bi bi-trash-fill"></i>
                                        </button>
                                    </div>
                                }
                            </div>
                        </div>

                        <!-- Engagement Footer -->
                        <div class="card-footer bg-white border-0 pt-0 pb-3 px-4">
                            <div class="d-flex justify-content-between align-items-center">
                                <div class="d-flex gap-4 text-muted small">
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-eye me-1"></i>
                                        <span class="fw-semibold">@blog.ViewCount.ToString("N0")</span>
                                    </div>
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-heart@(blog.IsLikedByCurrentUser ? "-fill text-danger" : "") me-1"></i>
                                        <span class="fw-semibold @(blog.IsLikedByCurrentUser ? "text-danger" : "")">@blog.LikeCount.ToString("N0")</span>
                                    </div>
                                    <div class="d-flex align-items-center">
                                        <i class="bi bi-chat-left me-1"></i>
                                        <span class="fw-semibold">@blog.CommentCount.ToString("N0")</span>
                                    </div>
                                </div>

                                @if (blog.IsLikedByCurrentUser)
                                {
                                    <div class="text-danger small fw-semibold">
                                        <i class="bi bi-heart-fill me-1"></i>Liked
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Load More Section (Future Enhancement) -->
        <div class="text-center mt-5 pt-4 border-top">
            <button class="btn btn-outline-primary btn-lg rounded-pill px-5" disabled>
                <i class="bi bi-arrow-down-circle me-2"></i>
                Load More Articles (Coming Soon)
            </button>
        </div>
    }
</div>

@code {
    // Existing properties
    private IEnumerable<BlogListDto>? blogs;
    private string? CurrentUserId;

    // New filter and sort properties
    private IEnumerable<CategoryDto>? categories;
    private List<int> selectedCategoryIds = new();
    private BlogSortBy selectedSortBy = BlogSortBy.Latest;
    private int totalBlogsCount = 0;

    // Enum for sorting (add this to your DTOs or create a shared enum file)
    // public enum BlogSortBy
    // {
    //     Latest,
    //     MostLiked,
    //     MostViewed,
    //     MostDiscussed
    // }

    protected override async Task OnInitializedAsync()
    {
        await LoadUser();
        await LoadCategories();
        await LoadBlogs();
    }

    private async Task LoadUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (!user.Identity?.IsAuthenticated ?? true)
        {
            Navigation.NavigateTo("/", true);
        }

        if (user.Identity?.IsAuthenticated == true)
        {
            CurrentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
    }

    private async Task LoadCategories()
    {
        try
        {
            // You'll need to add this method to your IBlogService
            categories = await CategoryService.GetAllCategoriesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading categories: {ex.Message}");
            categories = new List<CategoryDto>();
        }
    }

    private async Task LoadBlogs()
    {
        try
        {
            blogs = await BlogService.GetAllBlogsAsync(
                CurrentUserId,
                false, // includeUnpublished
                selectedCategoryIds.Any() ? selectedCategoryIds : null,
                selectedSortBy);

            // Get total count for display
            if (selectedCategoryIds.Any())
            {
                var allBlogs = await BlogService.GetAllBlogsAsync(CurrentUserId, false, null, selectedSortBy);
                totalBlogsCount = allBlogs.Count();
            }
            else
            {
                totalBlogsCount = blogs.Count();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading blogs: {ex.Message}");
            blogs = new List<BlogListDto>();
        }
    }

    // Filter and Sort Event Handlers
    private async Task OnCategoryToggle(int categoryId, bool isSelected)
    {
        if (isSelected)
        {
            if (!selectedCategoryIds.Contains(categoryId))
            {
                selectedCategoryIds.Add(categoryId);
            }
        }
        else
        {
            selectedCategoryIds.Remove(categoryId);
        }

        await LoadBlogs();
        StateHasChanged();
    }

    private async Task OnSortChange(BlogSortBy sortBy)
    {
        selectedSortBy = sortBy;
        await LoadBlogs();
        StateHasChanged();
    }

    private async Task SelectAllCategories()
    {
        if (categories != null)
        {
            selectedCategoryIds = categories.Select(c => c.Id).ToList();
            await LoadBlogs();
            StateHasChanged();
        }
    }

    private async Task ClearAllCategories()
    {
        selectedCategoryIds.Clear();
        await LoadBlogs();
        StateHasChanged();
    }

    private async Task ClearAllFilters()
    {
        selectedCategoryIds.Clear();
        selectedSortBy = BlogSortBy.Latest;
        await LoadBlogs();
        StateHasChanged();
    }

    private string GetSortDisplayText()
    {
        return selectedSortBy switch
        {
            BlogSortBy.Latest => "Latest First",
            BlogSortBy.MostLiked => "Most Liked",
            BlogSortBy.MostViewed => "Most Viewed",
            BlogSortBy.MostDiscussed => "Most Discussed",
            _ => "Latest First"
        };
    }

    // Existing methods
    private void RedirectToCreateBlog()
    {
        Navigation.NavigateTo("/blogs/create");
    }

    private void EditBlog(int blogId)
    {
        Navigation.NavigateTo($"/blogs/edit/{blogId}");
    }

    private void ShowDetails(int blogId)
    {
        Navigation.NavigateTo($"/blogs/details/{blogId}");
    }

    private async Task DeleteBlog(int blogId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm",
            "Are you sure you want to delete this blog? This action cannot be undone.");
        if (confirmed)
        {
            try
            {
                await BlogService.DeleteBlogAsync(blogId, CurrentUserId);
                await LoadBlogs(); // Reload with current filters
                StateHasChanged();
            }
            catch (Exception)
            {
                await JSRuntime.InvokeAsync<bool>("alert", "Failed to delete the blog. Please try again.");
            }
        }
    }
}

<style>
    .bg-gradient-primary {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    }

    .bg-gradient-secondary {
        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    }

    .hover-lift {
        transition: transform 0.3s ease, box-shadow 0.3s ease;
    }

        .hover-lift:hover {
            transform: translateY(-8px);
            box-shadow: 0 20px 40px rgba(0,0,0,0.1) !important;
        }

    .text-truncate-2 {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .text-truncate-3 {
        display: -webkit-box;
        -webkit-line-clamp: 3;
        -webkit-box-orient: vertical;
        overflow: hidden;
    }

    .card {
        transition: all 0.3s ease;
    }

    .badge {
        font-size: 0.75rem;
        font-weight: 500;
    }

    .btn {
        transition: all 0.2s ease;
    }

        .btn:hover {
            transform: translateY(-1px);
        }

    .btn-sm.rounded-circle {
        transition: all 0.3s ease;
    }

        .btn-sm.rounded-circle:hover {
            transform: scale(1.15);
            box-shadow: 0 4px 15px rgba(0,0,0,0.2);
        }

    .btn-warning:hover {
        background-color: #e0a800 !important;
        border-color: #e0a800 !important;
    }

    .btn-danger:hover {
        background-color: #c82333 !important;
        border-color: #c82333 !important;
    }

    .dropdown-menu {
        box-shadow: 0 10px 25px rgba(0,0,0,0.1);
        border: 0;
        border-radius: 0.5rem;
    }

    .form-check-input:checked {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }

    .dropdown-item.active {
        background-color: #0d6efd;
        color: white;
    }

    .badge .btn-close {
        --bs-btn-close-opacity: 0.8;
    }

        .badge .btn-close:hover {
            --bs-btn-close-opacity: 1;
        }
</style>