@page "/blogs"
@using BlazorAuthApp.DTOs
@using BlazorAuthApp.Interfaces
@using System.Security.Claims
@inject IBlogService BlogService
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<PageTitle>Blogs</PageTitle>

<div class="container my-4">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h2 class="fw-bold mb-0">Latest Blogs</h2>
        <button class="btn btn-primary btn-lg rounded-pill shadow-sm px-4"
                @onclick="RedirectToCreateBlog">
            <i class="bi bi-plus-circle me-2"></i> Create Blog
        </button>
    </div>

    @if (blogs == null)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (!blogs.Any())
    {
        <p class="text-muted text-center">No blogs found.</p>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-3 g-4">
            @foreach (var blog in blogs)
            {
                <div class="col">
                    <div class="card h-100 shadow-sm border-0 rounded-4 overflow-hidden">
                        @if (!string.IsNullOrEmpty(blog.FeaturedImageUrl))
                        {
                            <img src="@blog.FeaturedImageUrl" class="card-img-top rounded-top-4" alt="@blog.Title" />
                        }

                        <div class="card-body d-flex flex-column">
                            <h5 class="card-title fw-bold mb-2">@blog.Title</h5>
                            <p class="card-text text-muted mb-3">@blog.Summary</p>

                            <div class="d-flex flex-wrap gap-2 mb-3">
                                <span class="badge bg-light text-dark">
                                    <i class="bi bi-person me-1"></i> @blog.AuthorName
                                </span>
                                <span class="badge bg-primary text-white">
                                    <i class="bi bi-clock me-1"></i> @blog.EstimatedReadTime min read
                                </span>
                                @if (blog.IsPublished && blog.PublishedAt != null)
                                {
                                    var published = blog.PublishedAt.Value;
                                    var now = DateTime.Now;
                                    var today = now.Date;
                                    var yesterday = today.AddDays(-1);

                                    string displayDate;

                                    if (published.Date == today)
                                    {
                                        var diff = now - published;

                                        if (diff.TotalHours < 12)
                                        {
                                            if (diff.TotalHours < 1)
                                            {
                                                var minutes = Math.Max(1, (int)diff.TotalMinutes);
                                                displayDate = $"{minutes} min ago";
                                            }
                                            else
                                            {
                                                displayDate = $"{(int)diff.TotalHours} hours ago";
                                            }
                                        }
                                        else
                                        {
                                            displayDate = $"Today at {published:hh:mm tt}";
                                        }
                                    }
                                    else if (published.Date == yesterday)
                                    {
                                        displayDate = $"Yesterday at {published:hh:mm tt}";
                                    }
                                    else
                                    {
                                        displayDate = published.ToString("dd MMM yyyy, hh:mm tt");
                                    }

                                    <span class="badge bg-success text-white">
                                        <i class="bi bi-calendar-event me-1"></i>
                                        @displayDate
                                    </span>
                                }


                                else
                                {
                                    <span class="badge bg-secondary text-white">
                                        Draft
                                    </span>
                                }
                            </div>

                            <div class="mt-auto d-flex flex-wrap gap-2">
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => ShowDetails(blog.Id)">
                                    <i class="bi bi-eye me-1"></i> Details
                                </button>

                                @if (blog.IsOwner)
                                {
                                    <button class="btn btn-outline-warning btn-sm" @onclick="() => EditBlog(blog.Id)">
                                        <i class="bi bi-pencil-square me-1"></i> Edit
                                    </button>

                                    <button class="btn btn-outline-danger btn-sm" @onclick="() => DeleteBlog(blog.Id)">
                                        <i class="bi bi-trash me-1"></i> Delete
                                    </button>
                                }
                            </div>

                        </div>

                        <div class="card-footer bg-light border-0 d-flex justify-content-between align-items-center small">
                            <div>
                                <i class="bi bi-eye me-1"></i> @blog.ViewCount views
                            </div>
                            @* Uncomment if you want likes *@
                            @*<div>
                <i class="bi bi-hand-thumbs-up me-1"></i> @blog.LikeCount likes
            </div>*@
                        </div>
                    </div>
                </div>

            }
        </div>
    }
</div>

@code {
    private IEnumerable<BlogListDto>? blogs;
    private string? CurrentUserId;


    protected override async Task OnInitializedAsync()
    {
        await LoadUser();
        blogs = await BlogService.GetAllBlogsAsync(CurrentUserId = CurrentUserId);
    }

    private async Task LoadUser()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            CurrentUserId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        }
    }

    private void RedirectToCreateBlog()
    {
        Navigation.NavigateTo("/blogs/create");
    }

    private void EditBlog(int blogId)
    {
        Navigation.NavigateTo($"/blogs/edit/{blogId}");
    }

    private void ShowDetails(int blogId)
    {
        Navigation.NavigateTo($"/blogs/details/{blogId}");
    }

    private async Task DeleteBlog(int blogId)
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", "Are you sure you want to delete this blog?");
        if (confirmed)
        {
            await BlogService.DeleteBlogAsync(blogId, CurrentUserId);
            Navigation.NavigateTo("/blogs");
        }
    }

}
